guidelines for myself and direction of project

useful links https://github.com/rootVIII/proxy_requests

reddit stalker 
Step Gather Data 1:
	- parse the first 10 page of the donald 
		- inserts the users and posts + subreddit info(user+subreddit, post+subreddit)
	- parses the users page also about 10 pages
		- inserts following info:
			- which subreddit they posted in(table subrredit + user) each time that subredit comes up
			- adds list of subreddits (table subreddits)
			- seprate post from comment
				- posts and comments are seperated in the div tag data-type attr(post== link, comment== comment)
			



tables needed:
	users:
		- id
		- name 	

	posts:
		- id
 		- user_id
		- link
		- title
		- created_on

	comments:
		- id
 		- user_id
		- content(must be able to handle large walls of text)
		- link 
		- created_on

	subreddit:
		- id
		- name
	
	subredditPostJoin:
		- id
		- subreddit_id
		- post_id
		- subreddit_name
	
	subredditUserJoin:
		- id
		- subreddit_id
		- user_id
		- subreddit_name
		- username

	subredditCommentJoin:
		- id
		- subreddit_id
		- comment_id
		- subreddit_name


post container todo:
	- create test files
		- include posts from r/the_donald
		- inlcude next page link and next page test file(so for 2 files with 3 posts)

	- maybe look up mocking sqlalchemy for testing

	- work on turning PostContainer class into its own thread runner....
		- shared resources and ideas on how to safely access and use them:

	- test duplicate posts inserts

Create a Repo layer for users and Posts to reduce code duplication
	- putting this on hold for now
			
steps for each user: user url -> iterate through each post or comment -> determine if its comment or posts -> save -> next 
User container todo:
	- seperate adding comments and posts
		- create a comment insertion area
			- determine when a comment entry is a duplicate 
				- params for duplicate tests: username, subreddit, comment content
		- use post container to insert comments

	- create test class 
		- so far i created some basic html tests
		- test for duplicate comments
		- test for seprating comments from posts
		- test when user page count is less than 10
		
		
user runner class:
	- this class queries all user in the user table and then runs user container for each user
		- for now im thinking splitting the list into section and each sections runs in a seperate thread	

comment Container:
	- user data-permalink tag to check for duplicates 
	- add new column for comment table for link to comment

